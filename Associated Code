Exercise 1 (and Solution)
Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old. Note: for this exercise, the expectation is that you explicitly write out the year (and therefore be out of date the next year).
1.	Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. (Hint: order of operations exists in Python)
2.	Print out that many copies of the previous message on separate lines. (Hint: the string "\n is the same as pressing the ENTER button)
import datetime
import time


name = str(input("Hello, What's your name? "))
age = int(input("How old are you? "))
currentyear = datetime.date.today().year
year = str((currentyear - age) + 100)
time.sleep(2)
num = int(input("Last thing, pick a number : "))
print("Good Morning, " + name + " you will be 100 years old in the year " + str(year) + "." )

x = 0
while x < num:
    x += 1
    print(num)
    time.sleep(0.1)
else:
    print("Haha, hope you didn't say a large number!")
Exercise 2 (and Solution)
The exercise comes first (with a few extras if you want the extra challenge or want to spend more time), followed by a discussion. Enjoy!
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user. Hint: how does an even / odd number react differently when divided by 2?
1.	If the number is a multiple of 4, print out a different message.
2.	Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.
num = int(input("Please pick a number : "))
check = int(input("Next, pick another number to check for divisibility : "))
if num % 2 == 0:
    print("The number " + str(num) + " is even")
else:
    print("The number " + str(num) + " is odd.")

if num % 4 == 0:
    print("The number " + str(num) + " is also a multiple of 4!")

if num % check == 0:
    print("The number " + str(num)+ " is divisible by " + str(check)+ ".")
else:
    print("The number " + str(num) + " is not divisible by " + str(check) + ".")
Exercise 3 (and Solution)
Take a list, say for example this one:
  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.
1.	Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.
2.	Write this in one line of Python.
3.	Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = []
c = []
num = int(input("Please enter a number to check the list : " ))
for x in a:
    if x < 5:
        b.append(x)
        b.sort()
print(b)
print()

#print((x for x in a if x < 5))
for x in a:
    if x < num:
        c.append(x)
        c.sort()
print(c)

Exercise 4 (and Solution)
Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)

num = int(input("Please enter a number : "))
a = range(1,151)
b = []
for x in a:
    if x % num == 0:
        b.append(x)

print(b)




Exercise 5 (and Solution)
Take two lists, say for example these two:
  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.
Extras:
1.	Randomly generate two lists to test this
2.	Write this in one line of Python (don’t worry if you can’t figure this out at this point - we’ll get to it soon)

import random as rd

num1 = int(input("Enter the size for list 1 : "))
num2 = int(input("Enter the size for list 2 : "))
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
c = list(set(a).intersection(set(b)))
d = rd.sample(range(0, 100), num1)
e = rd.sample(range(0, 100), num2)
f = list(set(d).intersection(set(e)))

print(c)
print(d)
print(e)
print(f)

Exercise 6 (and Solution)
Ask the user for a string and print out whether this string is a palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)
word = str(input("enter a word to check to see if it is a palindrome : ")).lower()
if word == word[::-1]:
    print("The word " + word + " is a palindrome.")
else:
    print("The word " + word + " is not a palindrome.")

Exercise 7 (and Solution)
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.
import random as rd

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
b = rd.sample(range(1,101),50)
print([x for x in a if x % 2 == 0 ])
print([x for x in b if x % 2 == 0 ])

Exercise 8 (and Solution)
Make a two-player Rock-Paper-Scissors game. (Hint: Ask for player plays (using input), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game)
Remember the rules:
•	Rock beats scissors
•	Scissors beats paper
•	Paper beats rock
import random as rd

userpick = str(input("Hello, Please choose : Paper, Scissors or Rock ")).lower()
cpu = ["paper", "scissors", "rock"]
cpupick = rd.choice(cpu)
print("The computer picks " + cpupick)


if userpick == "paper":
    if cpupick == "scissors":
        print("Scissors beats Paper you lose, Sorry!")
    elif cpupick == "rock":
        print("Paper beats Rock you Win!")
    else:
        print("It's a tie, let's try again.")

if userpick == "scissors":
    if cpupick == "paper":
        print("Scissors beats Paper you win!")
    elif cpupick == "rock":
        print("Rock beats Scissors you lose, Sorry!")
    else:
        print("It's a tie, let's try again.")

if userpick == "rock":
    if cpupick == "paper":
        print("Paper beats Rock you lose, Sorry!")
    elif cpupick == "Scissors":
        print("Rock beats Scissors you win!")
    else:
        print("It's a tie, let's try again.")








Exercise 9 (and Solution)
Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (Hint: remember to use the user input lessons from the very first exercise)
Extras:
•	Keep the game going until the user types “exit”
•	Keep track of how many guesses the user has taken, and when the game ends, print this out.

import sys
import random as rd

options = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
num_guess = 0
guess_list = []
status = True
actual_num = rd.randint(0, 9)

while status:
    user_num = int((input(" Please select a number 0 - 9 : ")))
    if user_num == actual_num:
        print("Great guess!! You are right spot on!")
        num_guess +=1
        guess_list.append(user_num)
    if user_num < actual_num:
        print("You are close, but a little short! Guess again")
        num_guess +=1
        guess_list.append(user_num)
    if user_num > actual_num:
        print("You're a tad to high! Guess Again")
        num_guess +=1
        guess_list.append(user_num)
    #print(actual_num)
    check = str(input("Would you like to exit? type Exit: other wise type anything: ")).lower()
    if check == "exit":
       status = False
    else: continue

print("It took you " + str(num_guess) + " attempts to get it right! Your guesses were: ")
print(guess_list)








Exercise 10 (and Solution)
This week’s exercise is going to be revisiting an old exercise (see Exercise 5), except require the solution in a different way.
Take two lists, say for example these two:
	a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
	b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this in one line of Python
import random as rd

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
c = rd.sample(range(0,100),17)
d = rd.sample(range(0,100),30)
print(list(set(a).intersection(set(b))))
print(list(set(c).intersection(set(d))))

Exercise 11 (and Solution)
Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to Exercise 4 to help you. Take this opportunity to practice using functions, described below.
def get_num(help_text):
    return int(input(help_text))

p_num = get_num("Enter a numer to check if it is prime: ")

if p_num > 1:
    for i in range(2,int(p_num/2)+1):
        if (p_num % i ) == 0:
            print(str(p_num) + " is not prime number")
            break
    else:
        print(str(p_num) + " is a prime number")
else :
    print(str(p_num) + " is not prime number")







Exercise 12 (and Solution)
Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.
import random as rd

#a = rd.sample(range(0,100),15)

def first_last(x,y):
    a = rd.sample(range(1,x),y)
    b = [a[0],a[-1]]
    print(a)
    print(b)

first_last(100,10)

Exercise 13
Write a program that asks the user how many Fibonacci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.(Hint: The Fibonacci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)
def fib():
    count = int(input("Please enter the number of numbers to have in your fibinacci sequence? "))
    n = 1
    if count == 0:
        fib = []
    elif count == 1:
        fib = [1]
    elif count == 2:
        fib = [1, 1]
    elif count > 2:
        fib = [1, 1]
        while n < (count - 1):
            fib.append(fib[n] + fib[n-1])
            n += 1
    return fib

print(fib())








List Remove Duplicates    
Exercise 14 (and Solution)
Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.
Extras:
•	Write two different functions to do this - one using a loop and constructing a list, and another using sets.
•	Go back and do Exercise 5 using sets, and write the solution for that in a different function.

"""
import random as rd

def rand_num():
    return rd.randint(1,50)

def rand_list(y):
    return rd.sample(range(0,100),y)

t = rand_num()
h = rand_num()
e = rand_list(t)
f = rand_list(h)
p = list(set(e).intersection(set(f)))

print(e)
print(f)
print(p)

### ---------------------- PART 2 --------------------------
import random as rd

a = []
b = []
c = []

def create_list(d):
    x = rd.randint(1,50)
    while x > 0:
        y = rd.randint(1, 100)
        d.append(y)
        x-= 1

def combine_list(e,f):
    for x in e:
        if x in f:
            c.append(x)

create_list(a)
create_list(b)
combine_list(a,b)
print(a)
print(b)
print(c)

"""
###  -----------------------  PART 3 ---------------------------------

import random as rd

num1 = int(input("Please enter the size for list 1: " ))
num2 = int(input("Please enter the size for list 1: " ))
b = []
c = []
d = []

def create_list(x,a):
    while x > 0:
        y = rd.randint(1, 100)
        a.append(y)
        x-= 1
    return print(a)

def combine(a,b):
    for x in a:
        if x in b:
            d.append(x)
    return print(d)


create_list(num1,b)
create_list(num2,c)
combine(b,c)

Exercise 15 (and Solution)
Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order. For example, say I type the string:
  My name is Michele
Then I would see the string:
  Michele is name My
shown back to me.
long_str = str(input("Please enter a long string: " ))

def reverse(a):
    flip = a.split()
    return " ".join(flip[::-1])


print(reverse(long_str))





Exercise 16 (and Solution)
Note: this is a 4-chili exercise, not because it introduces a concept, but because this exercise is more like a project. Feel free to skip this and come back when you’re more ready!
Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method.
Extra:
•	Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.
•	import random as rd
import time as tm
import string as st

PW = []
greet = str(input("Hello, would you like to generate a password? (Y)es or N(o) : ").lower())
level = int(input("How strong would you like your password, 1 (weakest) - 5 (strongest)? " ))

def generator(x):
    if x <= 2:
        a = rd.randint(4, 6)
        while a > 0:
            b = list(st.ascii_letters)
            PW.append(rd.choice(b))
            a-= 1
        return print("".join(PW))
    elif x <= 4:
        a = rd.randint(5, 8)
        while a > 0:
            b = list(st.hexdigits)
            PW.append(rd.choice(b))
            a -= 1
        return print("".join(PW))
    else:
        a = rd.randint(6, 8)
        while a > 0:
            b = list(st.printable)
            PW.append(rd.choice(b))
            a -= 1
        return print("".join(PW))

#while greet = "y"
print("Your password is : ")
generator(level)





Exercise 17 (and Solution)
Create a program that will play the “cows and bulls” game with the user. The game works like this:
Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout the game and tell the user at the end.
import random as rd


def compare(guess, target_num):
    cow_bull = [0, 0]
    for i in range(len(guess)):
        if guess[i] in target_num:
            if guess[i] == target_num[i]:
                cow_bull[1]+=1
            elif guess[i] != target_num[i]:
                cow_bull[0]+=1
    return cow_bull


if __name__=="__main__":
    playing = True
    target_num = str(rd.randint(0, 9999))
    trys = 0

    print(target_num)
    print("Let's play a game of Cowbull!") #explanation
    print("I will generate a number, and you have to guess the numbers one digit at a time.")
    print("For every number in the wrong place, you get a cow. For every one in the right place, you get a bull.")
    print("The game ends when you get 4 bulls!")
    print("Type exit at any prompt to exit.")

    while playing:
        guess = input("please input your guess: ")
        if guess == "exit":
            break
        cowbullcount = compare(guess,target_num)
        trys+=1

        if guess != target_num:
            print("You have " + str(cowbullcount[0]) + " cows, and " + str(cowbullcount[1]) + " bulls.")
        else:
            print("Great guess!")

        if cowbullcount[1] == 4:
            playing == False
            print("You win the game after " + str(trys) + " trys! The number was " + str(target_num) + ".")
            break
        else:
            print("Your guess isn't quite right.")

print(guess)
print(target_num)
print(compare(guess, target_num))
